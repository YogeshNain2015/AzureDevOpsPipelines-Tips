# trigger:

# - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  subscription: Microsoft Partner Network (55cf0ba9-e3c1-4ced-b5e9-5abb7b4d39b1)
  resourceGroup: Team_AWS
  storageAccount: terraformtfstateskip
  container: tfstatefile
  tfstateFile: terraform.tfstate
  anyTfChanges: false

steps:

- task: TerraformInstaller@0
  inputs:
    terraformVersion: '0.12.3'
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    backendServiceArm: 'Microsoft Partner Network (55cf0ba9-e3c1-4ced-b5e9-5abb7b4d39b1)'
    backendAzureRmResourceGroupName: 'Team_AWS'
    backendAzureRmStorageAccountName: 'terraformstateskip'
    backendAzureRmContainerName: 'tfstatefile'
    backendAzureRmKey: 'tfstatefile'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    environmentServiceNameAzureRM: 'Microsoft Partner Network (55cf0ba9-e3c1-4ced-b5e9-5abb7b4d39b1)'

- task: PowerShell@2
  displayName: detect any terraform change
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    targetType: 'inline'
    script: |
      # Write-Host "LASTEXITCODE : $LASTEXITCODE"
      $plan = $(terraform show -json tfplan | ConvertFrom-Json)
      $actions = $plan.resource_changes.change.actions
      Write-Host "Terraform actions : $actions"
      if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
      {
        Write-Host "Terraform will perform the following actions : $actions"
        Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
      }
      else
      {
        Write-Host "There is no change detected in Terraform tfplan file"
      }
